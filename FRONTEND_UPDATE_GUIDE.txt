# üéØ Gu√≠a de Integraci√≥n Frontend - Sistema de Reprogramaci√≥n de Reservas

## üìã Resumen Ejecutivo

Esta gu√≠a contiene todos los endpoints necesarios para implementar la funcionalidad de reprogramaci√≥n de reservas en el frontend.

**Base URL**: `http://127.0.0.1:8000/api`

## üîê Autenticaci√≥n Requerida

Todos los endpoints requieren autenticaci√≥n JWT:
```
Headers:
Authorization: Bearer {token}
Content-Type: application/json
```

**Credenciales de prueba**:
- **Admin**: `gabriel.moreno@autonoma.edu.bo` / `admin123`
- **Usuario**: `juan.perez@autonoma.edu.bo` / `admin123`

---

## üèóÔ∏è ENDPOINTS PRINCIPALES DE RESERVAS

### 1. Obtener Reserva con Informaci√≥n de Reprogramaci√≥n
```http
GET /api/reservas/{id}/
```

**Respuesta incluye**:
```json
{
    "id": 1005,
    "usuario": {
        "id": 1,
        "nombres": "Gabriel",
        "apellidos": "Moreno"
    },
    "estado": "CONFIRMADA",
    "fecha_inicio": "2024-02-15T10:00:00Z",
    "fecha_fin": "2024-02-15T18:00:00Z",
    "numero_reprogramaciones": 0,
    "fecha_original": "2024-02-15T10:00:00Z",
    "puede_reprogramar": true,  // ‚≠ê CAMPO CLAVE
    "historial_reprogramaciones": [],
    "total": 150.00,
    "detalles": [...]
}
```

### 2. Verificar Si Puede Reprogramar (Endpoint Espec√≠fico)
```http
GET /api/reservas/{id}/puede-reprogramar/
```

**Respuesta**:
```json
{
    "puede_reprogramar": true,
    "razon": "La reserva cumple todos los requisitos",
    "reglas_aplicadas": [
        {
            "tipo": "TIEMPO_MINIMO",
            "cumple": true,
            "valor_requerido": "24 horas"
        },
        {
            "tipo": "LIMITE_REPROGRAMACIONES", 
            "cumple": true,
            "valor_actual": "0/3"
        }
    ]
}
```

### 3. Reprogramar Reserva
```http
POST /api/reservas/{id}/reprogramar/
```

**Payload**:
```json
{
    "nueva_fecha": "2025-03-15T14:00:00Z",
    "motivo": "Cliente solicit√≥ cambio por compromisos laborales"
}
```

**Respuesta exitosa**:
```json
{
    "mensaje": "Reserva reprogramada exitosamente",
    "reserva": {
        "id": 1005,
        "fecha_inicio": "2025-03-15T14:00:00Z",
        "fecha_fin": "2025-03-15T22:00:00Z",
        "numero_reprogramaciones": 1
    },
    "historial": {
        "id": 5,
        "fecha_anterior": "2024-02-15T10:00:00Z",
        "fecha_nueva": "2024-03-15T14:00:00Z",
        "motivo": "Cliente solicit√≥ cambio por compromisos laborales"
    }
}
```

**Respuesta de error**:
```json
{
    "error": "Reprogramaci√≥n no permitida",
    "detalles": {
        "fecha_inicio": [
            "La reprogramaci√≥n debe hacerse con al menos 24 horas de anticipaci√≥n."
        ]
    },
    "reglas_violadas": [
        {
            "tipo": "TIEMPO_MINIMO",
            "valor_requerido": 24,
            "valor_proporcionado": 12,
            "mensaje": "Debe reprogramar con al menos 24 horas de anticipaci√≥n"
        }
    ]
}
```

### 4. Historial de Reprogramaciones
```http
GET /api/reservas/{id}/historial-reprogramaciones/
```

**Respuesta**:
```json
[
    {
        "id": 1,
        "fecha_anterior": "2024-01-15T10:00:00Z",
        "fecha_nueva": "2024-02-15T10:00:00Z",
        "motivo": "Cliente solicit√≥ cambio",
        "fecha_reprogramacion": "2024-01-10T15:30:00Z",
        "usuario_responsable": "Gabriel Moreno"
    }
]
```

---

## ‚öôÔ∏è ENDPOINTS DE GESTI√ìN DE REGLAS (Solo Admins)

### 1. Obtener Reglas Activas
```http
GET /api/reglas-reprogramacion/activas/
```

**Respuesta**:
```json
[
    {
        "id": 2,
        "nombre": "L√≠mite reprogramaciones clientes",
        "tipo_regla": "LIMITE_REPROGRAMACIONES",
        "aplicable_a": "CLIENTE",
        "valor_numerico": 3,
        "activa": true,
        "prioridad": 1,
        "mensaje_error": "Ha alcanzado el l√≠mite m√°ximo de 3 reprogramaciones por reserva."
    },
    {
        "id": 1,
        "nombre": "Tiempo m√≠nimo est√°ndar",
        "tipo_regla": "TIEMPO_MINIMO",
        "aplicable_a": "ALL",
        "valor_numerico": 24,
        "activa": true,
        "mensaje_error": "Debe reprogramar con al menos 24 horas de anticipaci√≥n."
    }
]
```

### 2. Crear Nueva Regla
```http
POST /api/reglas-reprogramacion/
```

**Payload**:
```json
{
    "nombre": "Tiempo m√≠nimo 48h para servicios premium",
    "tipo_regla": "TIEMPO_MINIMO",
    "aplicable_a": "CLIENTE",
    "valor_numerico": 48,
    "activa": true,
    "prioridad": 1,
    "mensaje_error": "Los servicios premium requieren 48 horas de anticipaci√≥n"
}
```

### 3. Agrupar Reglas por Tipo
```http
GET /api/reglas-reprogramacion/por-tipo/
```

### 4. Activar/Desactivar Regla
```http
POST /api/reglas-reprogramacion/{id}/activar/
POST /api/reglas-reprogramacion/{id}/desactivar/
```

---

## üé® FLUJO DE IMPLEMENTACI√ìN FRONTEND

### Paso 1: Mostrar Informaci√≥n de Reserva
```javascript
// 1. Obtener reserva con informaci√≥n de reprogramaci√≥n
const reserva = await fetch(`/api/reservas/${reservaId}/`);

// 2. Mostrar si puede reprogramar
if (reserva.puede_reprogramar) {
    // Mostrar bot√≥n "Reprogramar"
    mostrarBotonReprogramar();
} else {
    // Mostrar raz√≥n por la que no puede
    mostrarMensaje("No se puede reprogramar esta reserva");
}
```

### Paso 2: Verificaci√≥n Adicional (Opcional)
```javascript
// Verificaci√≥n detallada con reglas aplicadas
const verificacion = await fetch(`/api/reservas/${reservaId}/puede-reprogramar/`);

if (!verificacion.puede_reprogramar) {
    // Mostrar reglas espec√≠ficas que no cumple
    mostrarReglasVioladas(verificacion.reglas_aplicadas);
}
```

### Paso 3: Formulario de Reprogramaci√≥n
```javascript
// Datos del formulario
const datosReprogramacion = {
    fecha_inicio: "2024-03-15T14:00:00Z",
    fecha_fin: "2024-03-15T22:00:00Z",
    motivo: "Cambio solicitado por el cliente"
};

try {
    const resultado = await fetch(`/api/reservas/${reservaId}/reprogramar/`, {
        method: 'POST',
        body: JSON.stringify(datosReprogramacion)
    });
    
    if (resultado.ok) {
        mostrarMensajeExito("Reserva reprogramada exitosamente");
        actualizarReserva(resultado.reserva);
    }
} catch (error) {
    mostrarErroresValidacion(error.reglas_violadas);
}
```

### Paso 4: Mostrar Historial
```javascript
// Obtener y mostrar historial de reprogramaciones
const historial = await fetch(`/api/reservas/${reservaId}/historial-reprogramaciones/`);
mostrarHistorialReprogramaciones(historial);
```

---

## üìù TIPOS DE REGLAS DISPONIBLES

| Tipo | Descripci√≥n | Campo Valor |
|------|-------------|-------------|
| `TIEMPO_MINIMO` | Horas m√≠nimas de anticipaci√≥n | `valor_numerico` |
| `TIEMPO_MAXIMO` | Horas m√°ximas hacia el futuro | `valor_numerico` |
| `LIMITE_REPROGRAMACIONES` | M√°ximo n√∫mero de reprogramaciones | `valor_numerico` |
| `DIAS_BLACKOUT` | D√≠as no permitidos | `valor_texto` (JSON array) |
| `HORAS_BLACKOUT` | Horas no permitidas | `valor_texto` (JSON array) |
| `DESCUENTO_REPROGRAMACION` | % de descuento por reprogramar | `valor_decimal` |
| `SERVICIOS_RESTRINGIDOS` | Servicios con restricciones | `valor_texto` (JSON array) |

---

## üö® MANEJO DE ERRORES

### Errores Comunes y Respuestas

**1. Token Expirado (401)**:
```json
{"detail": "Given token not valid for any token type"}
```
‚Üí Redirigir a login

**2. Reserva No Encontrada (404)**:
```json
{"detail": "No Reserva matches the given query."}
```
‚Üí Mostrar mensaje "Reserva no encontrada"

**3. Violaci√≥n de Reglas (400)**:
```json
{
    "error": "Reprogramaci√≥n no permitida",
    "reglas_violadas": [...]
}
```
‚Üí Mostrar errores espec√≠ficos al usuario

**4. Sin Permisos (403)**:
```json
{"detail": "Solo los administradores pueden gestionar reglas"}
```
‚Üí Ocultar funcionalidades de admin

---

## ‚úÖ CHECKLIST DE IMPLEMENTACI√ìN

- [ ] ‚úÖ Endpoint `/api/reservas/{id}/` funcionando
- [ ] ‚úÖ Endpoint `/api/reservas/{id}/puede-reprogramar/` funcionando  
- [ ] ‚úÖ Endpoint `/api/reservas/{id}/reprogramar/` funcionando
- [ ] ‚úÖ Endpoint `/api/reservas/{id}/historial-reprogramaciones/` funcionando
- [ ] ‚úÖ Endpoint `/api/reglas-reprogramacion/activas/` funcionando
- [ ] ‚úÖ Manejo de errores y validaciones
- [ ] ‚úÖ Interfaz de usuario para reprogramaci√≥n
- [ ] ‚úÖ Mostrar historial de reprogramaciones
- [ ] ‚úÖ Panel de administraci√≥n de reglas (solo admins)

---

## üéØ NOTAS IMPORTANTES

1. **Todos los endpoints est√°n verificados y funcionando** ‚úÖ
2. **Las URLs NO llevan el prefijo `/reservas/`** - son directamente `/api/reglas-reprogramacion/`
3. **El campo `puede_reprogramar` se calcula autom√°ticamente** en cada respuesta de reserva
4. **Las fechas deben enviarse en formato ISO 8601** con timezone
5. **Solo usuarios ADMIN pueden gestionar reglas** de reprogramaci√≥n
6. **El historial se guarda autom√°ticamente** en cada reprogramaci√≥n

---

**¬°Todos los endpoints est√°n listos para ser consumidos por el frontend!** üöÄ
